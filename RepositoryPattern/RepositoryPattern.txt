was first driven as a part of domain driven design in 2004

it provides an abstraction of data

it helps to provide loose coupling
benefit is to minimize duplication of logic

lets understand with the help of an example

let say you have requirement to display list of candidate

traditional approach: _db.Category.Select(i => new SelectListItem(){Text = i.Name, Value = i.Id.toString()})

repository approach

var categorySelectList = _repository.GetCategoryListForDropDown();

2. it decouples your application from persistance framework

in future if you decide to change, you can do with minimal impact on your app




******************* 2 Repository Overview

now repository should act like a collection of object in memory

so we have methods to add and remove an object
get object by id

GetAll(param1, param2)
GetFirstOrDefault(param1, param2)
Add(obj)
Remove(obj)

we should not implement method in repository

now for update and save, we something called unit of work

***************** Repository Pattern Detailed Flow

The unit of work class coordinates the work of multiple repositories
by create a single dbContext class shared by all of them

A unit of work maintains a list of objects affected by a business transaction and coordinates the writing out of the changes

the controller interacts with the unit of work, which has all the repository

and it will untimately interact with Entity

now the benefit you see here is 

there is a common dbContext for our repository pattern

without unit of work there will be separate dbContext


many argues that this is already implemented in Entity framwork,
DbSEt					DbContext

Add(obj)				DbSet
Remove(obj)				DbSet
Find(id)				DbSet
FirstOrDefault			Savechanges()
repository             unit of work

as we can see that this is implemented in terms of repository pattern and units of work

but there is a problem lets go back to our ex

what happens when you have to repeat the query in multiple places 

so in this case , we want a repository that has a method dropdown, so we can minimize the duplication of logic	



now the other adv is it decouples your application from persistence framework,

when you are using Dbset and DbContext directly in your application
Entity framework is tighlty coupled

and what if you want to use a different orm

repository pattern is not recommended if we have strict time line

